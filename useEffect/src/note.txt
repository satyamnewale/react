useEffect(() => {
    //code
},[dependencies])

// useEffect is never rapped in any conditional statement

eg: if(!true) {
    useEffect(() => {}, [])
} // not allowed

but: useEffect(() => {
    if(!true){
        code
    }
},[]) // allowed

//Purpose of useEffect
Used for side effects in functional components:
Fetching data
DOM manipulation
Setting up subscriptions/timers
Syncing state to localStorage
Cleanup tasks

//Dependency Array
[]: Runs only once (on mount)
[state, props]: Runs when any dependency changes
No array: Runs after every render

// keys to note
Forgetting dependencies ➝ stale values
Adding unnecessary dependencies ➝ infinite loops

// cleanup function
useEffect(() => {
  const id = setInterval(() => console.log('tick'), 1000);
  return () => clearInterval(id); // cleanup
}, []);
//never forget or code may not execute

//Common Interview Questions
What is useEffect and why is it used?
How is it different from componentDidMount, componentDidUpdate, componentWillUnmount?
What happens if you forget the dependency array?
How to fetch data using useEffect?
Why does an effect run infinitely?
When and how is the cleanup function triggered?
How can you debounce an effect or delay it?
How to make multiple effects in one component?

// fetch data common mistake
useEffect(async () => {})  // wrong

useEffect(() => {
  const fetchData = async () => {
    const res = await fetch(...);
  };
  fetchData();
}, []);
//correct


//three cycles of useEffect
//componentDidMount()
Runs once after the component is first rendered.
Use it for: Fetching data, setting up subscriptions, etc.
useEffect(() => {
  // runs once after mount
}, []);


//componentDidUpdate(prevProps, prevState)
Runs after every update, but not on mount.
Use it to react to state or prop changes.
to avoid mount render use ref hook
useEffect(() => {
  // runs when count changes
}, [count]);

//componentWillUnmount()
Runs just before the component is destroyed.
Use it to cleanup timers, listeners, subscriptions.
useEffect(() => {
  const id = setInterval(...);
  return () => {
    clearInterval(id); // cleanup
  };
}, []);
